# Test를 실행시키면 Test용 Build가 된다.
# Build를 할 때, src/main/java 를 빌드한 후 classpath에 놓는다.
# src/main/test 를 빌드한 후 classpath에 놓는다.
# 따라서 test 코드에서는 test/application.properties 를 읽는다.

# 단점.
# 개별적인 속성을 덮어씌우는게 아니라 파일을 덮어씌우기 때문에
# 추후에 java/resources/application.properties 에 새로운 속성을 추가시켰을 때
# Test 시에 적용이 안됨. 왜냐? test/resources/application.properties가 덮어씌우기 때문임.
# 이 방법은 별로 안쓰고 싶네.

bactoria.name = Junoh

# https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#boot-features-external-config-random-values
# 1~26 사이 랜덤 숫자
bactoria.age = ${random.int[1,27]}

# https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#boot-features-external-config-placeholders-in-properties
# Placeholder
bactoria.fullName = ${bactoria.name} Hwang

from.route=test/resources/application.properties